{"version":3,"file":"scramjet.codecs.js","sources":["webpack://@mercuryworkshop/scramjet/./src/codecs/index.ts"],"sourcesContent":["import { enc, dec } from \"./aes\";\n\n// for some reason eslint was parsing the type inside of the function params as a variable\nexport interface Codec {\n\t// eslint-disable-next-line\n\tencode: (str: string | undefined) => string;\n\t// eslint-disable-next-line\n\tdecode: (str: string | undefined) => string;\n}\n\nconst xor = {\n\tencode: (str: string | undefined, key: number = 2) => {\n\t\tif (!str) return str;\n\n\t\treturn encodeURIComponent(\n\t\t\tstr\n\t\t\t\t.split(\"\")\n\t\t\t\t.map((e, i) =>\n\t\t\t\t\ti % key ? String.fromCharCode(e.charCodeAt(0) ^ key) : e\n\t\t\t\t)\n\t\t\t\t.join(\"\")\n\t\t);\n\t},\n\tdecode: (str: string | undefined, key: number = 2) => {\n\t\tif (!str) return str;\n\n\t\treturn decodeURIComponent(str)\n\t\t\t.split(\"\")\n\t\t\t.map((e, i) => (i % key ? String.fromCharCode(e.charCodeAt(0) ^ key) : e))\n\t\t\t.join(\"\");\n\t},\n};\n\nconst plain = {\n\tencode: (str: string | undefined) => {\n\t\tif (!str) return str;\n\n\t\treturn encodeURIComponent(str);\n\t},\n\tdecode: (str: string | undefined) => {\n\t\tif (!str) return str;\n\n\t\treturn decodeURIComponent(str);\n\t},\n};\n\n/*\nconst aes = {\n    encode: (str: string | undefined) => {\n        if (!str) return str;\n\n        return encodeURIComponent(enc(str, \"dynamic\").substring(10));\n    },\n    decode: (str: string | undefined) => {\n        if (!str) return str;\n\n        return dec(\"U2FsdGVkX1\" + decodeURIComponent(str), \"dynamic\");\n    }\n}\n*/\n\nconst none = {\n\tencode: (str: string | undefined) => str,\n\tdecode: (str: string | undefined) => str,\n};\n\nconst base64 = {\n\tencode: (str: string | undefined) => {\n\t\tif (!str) return str;\n\n\t\treturn decodeURIComponent(btoa(str));\n\t},\n\tdecode: (str: string | undefined) => {\n\t\tif (!str) return str;\n\n\t\treturn atob(str);\n\t},\n};\n\nif (!self.$scramjet) {\n\t//@ts-expect-error really dumb workaround\n\tself.$scramjet = {};\n}\nself.$scramjet.codecs = {\n\tnone,\n\tplain,\n\tbase64,\n\txor,\n};\n"],"names":["xor","encode","str","key","encodeURIComponent","split","map","e","i","String","fromCharCode","charCodeAt","join","decode","decodeURIComponent","plain","none","base64","btoa","atob","self","$scramjet","codecs"],"mappings":";;;;;;;;;;;;;;;;;;;;AAUA,IAAMA,MAAM;IACXC,QAAQ,SAACC;YAAyBC,uEAAc;QAC/C,IAAI,CAACD,KAAK,OAAOA;QAEjB,OAAOE,mBACNF,IACEG,KAAK,CAAC,IACNC,GAAG,CAAC,SAACC,GAAGC;mBACRA,IAAIL,MAAMM,OAAOC,YAAY,CAACH,EAAEI,UAAU,CAAC,KAAKR,OAAOI;WAEvDK,IAAI,CAAC;IAET;IACAC,QAAQ,SAACX;YAAyBC,uEAAc;QAC/C,IAAI,CAACD,KAAK,OAAOA;QAEjB,OAAOY,mBAAmBZ,KACxBG,KAAK,CAAC,IACNC,GAAG,CAAC,SAACC,GAAGC;mBAAOA,IAAIL,MAAMM,OAAOC,YAAY,CAACH,EAAEI,UAAU,CAAC,KAAKR,OAAOI;WACtEK,IAAI,CAAC;IACR;AACD;AAEA,IAAMG,QAAQ;IACbd,QAAQ,SAACC;QACR,IAAI,CAACA,KAAK,OAAOA;QAEjB,OAAOE,mBAAmBF;IAC3B;IACAW,QAAQ,SAACX;QACR,IAAI,CAACA,KAAK,OAAOA;QAEjB,OAAOY,mBAAmBZ;IAC3B;AACD;AAEA;;;;;;;;;;;;;AAaA,GAEA,IAAMc,OAAO;IACZf,QAAQ,SAACC;eAA4BA;;IACrCW,QAAQ,SAACX;eAA4BA;;AACtC;AAEA,IAAMe,SAAS;IACdhB,QAAQ,SAACC;QACR,IAAI,CAACA,KAAK,OAAOA;QAEjB,OAAOY,mBAAmBI,KAAKhB;IAChC;IACAW,QAAQ,SAACX;QACR,IAAI,CAACA,KAAK,OAAOA;QAEjB,OAAOiB,KAAKjB;IACb;AACD;AAEA,IAAI,CAACkB,KAAKC,SAAS,EAAE;IACpB,yCAAyC;IACzCD,KAAKC,SAAS,GAAG,CAAC;AACnB;AACAD,KAAKC,SAAS,CAACC,MAAM,GAAG;IACvBN,MAAAA;IACAD,OAAAA;IACAE,QAAAA;IACAjB,KAAAA;AACD;AAtFA,0FAA0F;AAMzF"}